@using wppCms.Areas.Usr.Models
@model UsrArticlesCreateEditViewModel

@{
    ViewData["Title"] = "ArticleForm";
    Layout = "~/Areas/Usr/Views/Shared/_Layout.cshtml";
}

<style>
    .image-wrapper {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .img-thumbnail {
        max-width: 150px;
        height: auto;
        margin-right: 10px;
    }

    .url-container {
        display: flex;
        align-items: center;
    }

        .url-container a {
            text-decoration: none;
            color: #007bff;
            word-break: break-all;
        }

        .url-container button {
            margin-left: 10px;
        }
</style>

<div class="container">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/@Model.Culture/usr">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="/@Model.Culture/usr/channel/@Model.ChannelId">Channel</a></li>
            <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]</li>
        </ol>
    </nav>

    <h2>@(Model.IsEditMode ? "Edit Article" : "Create New Article")</h2>

    <form action="/@Model.Culture/usr/channel/@Model.ChannelId/article/save" method="post">
        @Html.AntiForgeryToken()

        <!-- Validation summary for non-field-specific errors -->
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <strong>Please correct the following errors:</strong>
                <ul>
                    @foreach (var entry in ViewData.ModelState)
                    {
                        foreach (var error in entry.Value.Errors)
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    }
                </ul>
            </div>
        }


        <!-- Conditionally set RowKey for new article -->
        <input type="hidden" asp-for="RowKey" name="RowKey" value="@(Model.IsEditMode ? Model.RowKey : Guid.NewGuid().ToString())" />
        <input type="hidden" name="IsEditMode" value="@(Model.IsEditMode ? "true" : "false")" />
        <input type="hidden" name="channelId" value="@Model.ChannelId" />


        <div class="row">
            <div class="col-md-8 my-2">
                <div class="mb-3">
                    <label asp-for="Folders" class="form-label">Path</label>
                    <input asp-for="Folders" name="Folders" class="form-control" value="@Model.Folders" />
                    <span asp-validation-for="Folders" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Title" class="form-label">Title</label>
                    <input asp-for="Title" name="Title" class="form-control" value="@Model.Title" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Text" class="form-label">Text</label>
                    <textarea asp-for="Text" name="Text" class="form-control" rows="20">@Model.Text</textarea>
                    <span asp-validation-for="Text" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Description" class="form-label">Description</label>
                    <textarea asp-for="Description" name="Description" class="form-control" rows="3">@Model.Description</textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="MainImageUrl" class="form-label">MainImageUrl</label>
                    <input asp-for="MainImageUrl" name="MainImageUrl" class="form-control" value="@Model.MainImageUrl" />
                    <span asp-validation-for="MainImageUrl" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-4 my-2">
                <div class="mb-3">
                    <label asp-for="PermaName" class="form-label">PermaName</label>
                    <input asp-for="PermaName" name="PermaName" value="@Model.PermaName" class="form-control" />
                    <span asp-validation-for="PermaName" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="AuthorId" class="form-label">Select Author</label>
                    <select asp-for="AuthorId" name="AuthorId" class="form-select" required>
                        <option value="" disabled selected>Select an author</option>
                        @foreach (var author in Model.Authors)
                        {
                            <option value="@author.RowKey" @(author.RowKey == Model.AuthorId ? "selected" : "")>
                                @author.Title
                            </option>

                        }
                    </select>
                    <span asp-validation-for="AuthorId" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Tags" class="form-label">Tags</label>
                    <input asp-for="Tags" name="Tags" class="form-control" value="@Model.Tags" />
                    <span asp-validation-for="Tags" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="PublishSince" class="form-label">Publish Since</label>
                    <input asp-for="PublishSince" name="PublishSince" class="form-control" type="datetime-local" value="@Model.PublishSince" />
                    <span asp-validation-for="PublishSince" class="text-danger"></span>
                    <div>@Model.PublishSince</div>
                </div>

                <div class="mb-3">
                    <label asp-for="PublishUntil" class="form-label">Publish Until</label>
                    <input asp-for="PublishUntil" name="PublishUntil" class="form-control" type="datetime-local" value="@Model.PublishUntil" />
                    <span asp-validation-for="PublishUntil" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="ArticleCulture" class="form-label">Culture</label>
                    <input asp-for="ArticleCulture" name="ArticleCulture" class="form-control" value="@Model.ArticleCulture" />
                    <span asp-validation-for="ArticleCulture" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <button type="submit" class="btn btn-primary">
                        @(Model.IsEditMode ? "Update Article" : "Create Article")
                    </button>
                </div>

                <hr />

                <h2>Upload Image</h2>
                <!-- Drag-and-drop area -->
                <div id="uploadArea" class="upload-area p-4 border border-primary rounded text-center">
                    <p>Drag and drop an image here, or click to upload.</p>
                    <input type="file" id="fileInput" accept="image/*" style="display: none;" />
                </div>

                <!-- Uploaded Image Previews -->
                <div id="previewContainer" class="mt-3" style="display: none;">
                    <h4>Uploaded Images</h4>
                    <div id="imageList">
                        <!-- Dynamically added images and URLs will appear here -->
                    </div>
                </div>
                <div id="codeOutput" class="mt-3" style="display: none;">
                    <h4>Generated Masonry Code</h4>
                    <pre id="codeContainer" class="bg-light p-3"></pre>
                </div>
            </div>
        </div>


    </form>
</div>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const previewContainer = document.getElementById('previewContainer');
        const imageList = document.getElementById('imageList');

        // Open file input on click
        uploadArea.addEventListener('click', () => fileInput.click());

        // Handle file selection
        fileInput.addEventListener('change', async (event) => {
            const files = Array.from(event.target.files);
            if (files.length) {
                await processFiles(files);
            }
        });

        // Handle drag-and-drop functionality
        uploadArea.addEventListener('dragover', (event) => {
            event.preventDefault();
            uploadArea.classList.add('border-success');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('border-success');
        });

        uploadArea.addEventListener('drop', async (event) => {
            event.preventDefault();
            uploadArea.classList.remove('border-success');
            const files = Array.from(event.dataTransfer.files);
            if (files.length) {
                await processFiles(files);
            }
        });

        // Process multiple files
        async function processFiles(files) {
            for (const file of files) {
                if (file.type.startsWith('image/')) {
                    await uploadImage(file);
                } else {
                    alert(`Invalid file type: ${file.name}`);
                }
            }
        }

        // Upload an individual image
        async function uploadImage(file) {
            const formData = new FormData();
            formData.append('files', file); // Ensure key matches server-side parameter name

            try {
                const culture = '@Model.Culture';
                const channelId = '@Model.ChannelId';
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                const response = await fetch(`/${culture}/usr/channel/${channelId}/article/upload-assets`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': token
                    },
                    body: formData
                });

                if (response.ok) {
                    const data = await response.json();

                    // If server returns an array, loop through and add previews
                    if (Array.isArray(data)) {
                        data.forEach((item) => addPreview(item.thumbnailUrl, item.originalUrl));
                    } else {
                        // Handle single file case
                        addPreview(data.thumbnailUrl, data.originalUrl);
                    }
                } else {
                    const errorMessage = await response.text();
                    console.error('Upload failed:', errorMessage);
                    alert(`Failed to upload ${file.name}: ${errorMessage}`);
                }
            } catch (error) {
                console.error(`Error uploading ${file.name}:`, error);
                alert(`An error occurred while uploading ${file.name}`);
            }
        }

        function addPreview(thumbnailUrl, originalUrl) {
            const imageWrapper = document.createElement('div');
            imageWrapper.classList.add('image-wrapper', 'mb-3');

            // Thumbnail image
            const img = document.createElement('img');
            img.src = thumbnailUrl;
            img.alt = 'Uploaded Image';
            img.classList.add('img-thumbnail', 'me-2');

            // URL container with link and copy button
            const urlContainer = document.createElement('div');
            urlContainer.classList.add('url-container');

            const link = document.createElement('a');
            link.href = originalUrl;
            link.target = '_blank';
            link.textContent = originalUrl;

            const copyButton = document.createElement('button');
            copyButton.textContent = 'Copy URL';
            copyButton.classList.add('btn', 'btn-sm', 'btn-outline-primary', 'ms-2');
            copyButton.type = 'button'; // Prevents default form submission behavior

            // Show a toast notification when URL is copied
            copyButton.addEventListener('click', () => {
                navigator.clipboard.writeText(originalUrl).then(() => {
                    showToast('URL copied to clipboard!');
                });
            });

            // Append elements
            urlContainer.appendChild(link);
            urlContainer.appendChild(copyButton);
            imageWrapper.appendChild(img);
            imageWrapper.appendChild(urlContainer);
            imageList.appendChild(imageWrapper);

            // Make the preview container visible
            previewContainer.style.display = 'block';
        }

        // Show a toast notification
        function showToast(message) {
            let toastContainer = document.getElementById('toastContainer');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toastContainer';
                toastContainer.style.position = 'fixed';
                toastContainer.style.bottom = '20px';
                toastContainer.style.right = '20px';
                toastContainer.style.zIndex = '9999';
                toastContainer.style.maxWidth = '300px';
                document.body.appendChild(toastContainer);
            }

            const toast = document.createElement('div');
            toast.textContent = message;
            toast.style.background = '#333';
            toast.style.color = '#fff';
            toast.style.padding = '10px 20px';
            toast.style.borderRadius = '5px';
            toast.style.marginTop = '10px';
            toast.style.boxShadow = '0px 2px 6px rgba(0, 0, 0, 0.2)';
            toast.style.opacity = '1';
            toast.style.transition = 'opacity 0.5s ease';

            toastContainer.appendChild(toast);

            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => toast.remove(), 500);
            }, 3000);
        }

        // Generate Masonry Markup
        const generateCodeButton = document.createElement('button');
        generateCodeButton.textContent = 'Generate Masonry Code';
        generateCodeButton.classList.add('btn', 'btn-primary', 'mt-3');
        generateCodeButton.type = 'button';
        generateCodeButton.addEventListener('click', () => {
            const imageUrls = Array.from(imageList.querySelectorAll('a')).map(a => a.href); // Get all image URLs

            if (imageUrls.length === 0) {
                alert('No images to generate markup.');
                return;
            }

            const masonryMarkup = generateMasonryMarkup(imageUrls);

            const codeContainer = document.getElementById('codeContainer');
            const codeOutput = document.getElementById('codeOutput'); // Get the container for displaying code

            if (codeContainer) {
                codeContainer.textContent = masonryMarkup; // Add the generated markup to the container
            }

            if (codeOutput) {
                codeOutput.style.display = 'block'; // Make the code output section visible
            }

            // Append Masonry markup to the DOM if needed
            const masonryContainer = document.querySelector('#masonryContainer');
            if (masonryContainer) {
                masonryContainer.innerHTML = masonryMarkup;
                initializeMasonry('#masonryContainer'); // Initialize Masonry after images are loaded
            }
        });

        previewContainer.appendChild(generateCodeButton);

        function generateMasonryMarkup(imageUrls) {
            let masonryMarkup = `<div id="masonryContainer" class="row">\n`;
            imageUrls.forEach(url => {
                masonryMarkup += `  <div class="col-md-4 mb-4">\n`;
                masonryMarkup += `    <img src="${url}" class="img-fluid" alt="Uploaded Image">\n`;
                masonryMarkup += `  </div>\n`;
            });
            masonryMarkup += `</div>`;
            return masonryMarkup;
        }
    });
</script>
